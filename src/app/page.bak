"use client";

import AboutSection from "@/components/AboutSection";
import EventsSection from "@/components/EventsSection";
import HeroSection from "@/components/HeroSection";
import IdeaSection from "@/components/IdeaSection";
import NavBar from "@/components/NavBar";
import PastSection from "@/components/PastSection";
import PostLoading from "@/components/PostLoading";
import SpaceShipModel from "@/models/SpaceShipModel";
import gsap from "gsap";
import { useEffect, useRef, useState } from "react";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { SpaceshipContext } from "@/contexts/SpaceShipContext";
import ReactHowler from "react-howler";
import MultiEventsSection from "@/components/MultiEventsSection";
import FAQSection from "@/components/FAQSectoin";
import Footer from "@/components/Footer";
import { ScrollToPlugin } from "gsap/ScrollToPlugin";

gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

export default function Home() {
  const [showSpaceship, setShowSpaceship] = useState(true);
  const spaceshipRef = useRef(null);
  const mainRef = useRef(null);
  const [playOne, setPlayOne] = useState(false);
  const [playTwo, setPlayTwo] = useState(false);
  const howlerOneRef = useRef();
  const howlerTwoRef = useRef();
  const [currentSection, setCurrentSection] = useState(0);
  const sections = useRef([]);
  const isScrolling = useRef(false);
  const scrollTimeout = useRef(null);
  const [loadingComplete, setLoadingComplete] = useState(false);

  const setSectionIndex = (index) => {
    setCurrentSection(index);
  }

  useEffect(() => {
    if (!loadingComplete) return;

    const sectionElements = document.querySelectorAll('section, footer');
    
    sections.current = Array.from(sectionElements);

    const scrollToSection = (index) => {
      if (isScrolling.current) return;

      isScrolling.current = true;
      setCurrentSection(index);

      gsap.to(window, {
        duration: 1,
        scrollTo: {
          y: sections.current[index],
          autoKill: false,
          offsetY: 0,
        },
        ease: "power2.inOut",
        onComplete: () => {
          if (scrollTimeout.current) clearTimeout(scrollTimeout.current);
          isScrolling.current = false;
        },
      });
    };

    const isMobile = /Mobi|Android/i.test(navigator.userAgent) || window.innerWidth <= 768;

    if (!isMobile) {
      const handleWheel = (e) => {
        e.preventDefault();

        const direction = e.deltaY > 0 ? 1 : -1;
        const newSection = Math.max(0, Math.min(sections.current.length - 1, currentSection + direction));

        if (newSection !== currentSection) {
          scrollToSection(newSection);
        }
      };

      const handleKeyDown = (e) => {
        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
          e.preventDefault();
          const direction = e.key === 'ArrowDown' ? 1 : -1;
          const newSection = Math.max(0, Math.min(sections.current.length - 1, currentSection + direction));

          if (newSection !== currentSection) {
            scrollToSection(newSection);
          }
        }
      };

      window.addEventListener('wheel', handleWheel, { passive: false });
      window.addEventListener('keydown', handleKeyDown);

      return () => {
        window.removeEventListener('wheel', handleWheel);
        window.removeEventListener('keydown', handleKeyDown);
      };
    } else {
      let touchStart = 0;
      const handleTouchStart = (e) => {
        touchStart = e.touches[0].clientY;
      };

      const handleTouchMove = (e) => {
        e.preventDefault();
        const touchEnd = e.touches[0].clientY;
        const direction = touchStart > touchEnd ? 1 : -1;

        if (Math.abs(touchStart - touchEnd) > 50) {
          const newSection = Math.max(0, Math.min(sections.current.length - 1, currentSection + direction));
          if (newSection !== currentSection) {
            scrollToSection(newSection);
          }
          touchStart = touchEnd;
        }
      };

      window.addEventListener('touchstart', handleTouchStart, { passive: false });
      window.addEventListener('touchmove', handleTouchMove, { passive: false });

      return () => {
        window.removeEventListener('touchstart', handleTouchStart);
        window.removeEventListener('touchmove', handleTouchMove);
      };
    }
  }, [loadingComplete, currentSection]);

  const startReveal = () => {
    const tl = gsap.timeline();
    gsap.set("#hero-section", { opacity: 1 });
    gsap.set("#hero-title", { y: 100 });
    gsap.set("#hero-subtitle", { x: -100, opacity: 0, y: -50 });
    gsap.set("#hero-comingsoon", { y: 30, opacity: 0 });
    gsap.set("#hero-countdown", { scale: 0.95, opacity: 0 });

    tl
      .to("#hero-title", {
        duration: 2,
        y: 0,
        ease: "power2.out",
        onComplete: () => {
          gsap.set("#model", {zIndex: "-10"})
          gsap.set(spaceshipRef.current.position, {x: 2.5, y: 1, z: 0});
          gsap.set(spaceshipRef.current.scale, {x: "+=0.5", y: "+=0.5", z: "+=0.5"});
        }
      })
      .to("#hero-title", {
        duration: 2,
        y: 0,
        ease: "power2.inOut"
      })
      .to("#hero-subtitle", {
        x: 0,
        opacity: 2,
        duration: 0.8,
        ease: "power3.out"
      }, "-=0.5")
      .set("#section-container", {display: "block"})
      .to("#hero-comingsoon", {
        y: 0,
        opacity: 1,
        duration: 0.8,
        ease: "power2.out",
        onComplete: () => {
          gsap.to("#section-container", {
            opacity: 1,
            duration: 0.5,
            ease: "power2.out",
            onComplete: () => {
              setLoadingComplete(true);
            }
          })
        }
      }, "-=0.4")
      .to("#hero-countdown", {
        scale: 1,
        opacity: 1,
        duration: 1,
        ease: "back.out(1.7)",
        onComplete: () => {
          gsap.to("#hero-title-glitch", {
            opacity: 0,
            duration: 0.5,
            ease: "power2.out",
          });
        }
      }, "-=0.4");
  };

  function transitHero() {
    const interval = setInterval(() => {
      if (spaceshipRef.current) {
        clearInterval(interval);
        const initialScale = spaceshipRef.current.scale;
        const tl = gsap.timeline();

        tl
        .call(() => {
          setPlayOne(true);
        })
        .to(spaceshipRef.current.position, {
          x: 2.5,
          y: 2.5,
          z: 2.5,
          duration: 1.5,
          ease: "power2.out",
          onComplete: () => {
            setPlayTwo(true);
          }
        })
        .to(spaceshipRef.current.rotation, {
          y: -Math.PI / 8,
          x: 0,
          z: 0,
          duration: 1.5,
          ease: "power2.out",
        }, "<")
        .to(spaceshipRef.current.scale, {
          x: initialScale.x * 0.5,
          y: initialScale.y * 0.5,
          z: initialScale.z * 0.5,
          duration: 1.5,
          ease: "power2.out",
        }, "<")
        .to(spaceshipRef.current.scale, {
          x: initialScale.x * 2.5,
          y: initialScale.y * 2.5,
          z: initialScale.z * 2.5,
          duration: 1.5,
          ease: "power2.out",
          onComplete: () => {
            setPlayOne(false);
            startReveal();
          }
        })
        .to(spaceshipRef.current.position, {
          x: 0,
          y: 0,
          z: 1,
          duration: 1.5,
          ease: "power2.out",
        }, "<")
        .to(spaceshipRef.current.rotation, {
          y: Math.PI / 2,
          x: -Math.PI / 2,
          z: 0,
          duration: 1.5,
          ease: "power2.out",
        }, "<")
        .to(spaceshipRef.current.scale, {
          x: initialScale.x,
          y: initialScale.y,
          z: initialScale.z,
          duration: 1.5,
          ease: "power2.out",
        })
        .to(spaceshipRef.current.position, {
          x: 35,
          y: 0,
          z: 0,
          duration: 1.5,
          ease: "power2.out",
        }, "<");
      }
    }, 100);
  
    return () => clearInterval(interval);
  }

  useEffect(() => {
    if (playOne) {
      howlerOneRef.current.play();
    } else {
      howlerOneRef.current.stop();
    }

    if (playTwo) {
      howlerTwoRef.current.play();
    } else {
      howlerTwoRef.current.stop();
    }
  }, [playOne, playTwo]);

  return (
    <SpaceshipContext.Provider value={spaceshipRef}>
      <main ref={mainRef} className="min-h-screen w-screen flex flex-col items-center justify-center overflow-x-hidden">
        <div id="model" className="fixed flex items-center justify-center top-0 left-0 z-[100] pointer-events-none">
          <ReactHowler
            src="/sounds/woof.mp3"
            playing={false} 
            html5={true}
            ref={howlerOneRef}
            volume={1}
          />

          <ReactHowler
            src="/sounds/reveal.mp3"
            playing={false}
            html5={true}
            ref={howlerTwoRef}
            volume={1}
          />
          {showSpaceship && <SpaceShipModel ref={spaceshipRef} />}
        </div>
        <PostLoading onComplete={transitHero} />
        <HeroSection onSectionChange={setSectionIndex} />
        <div id="section-container" className="h-full w-full hidden opacity-0">
          <NavBar />
          <IdeaSection />
          <AboutSection />
          <EventsSection />
          <MultiEventsSection onSectionChange={setSectionIndex} />
          <PastSection onSectionChange={setSectionIndex} />
          <FAQSection />
          <Footer />
        </div>
      </main>
    </SpaceshipContext.Provider>
  );
}